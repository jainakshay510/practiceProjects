package multithreadingexample;

import java.util.Random;
import java.util.concurrent.ArrayBlockingQueue;
import java.util.concurrent.BlockingQueue;

public class ProducerConsumer {
	
	private BlockingQueue<Integer> queue=new ArrayBlockingQueue<>(10);
	
	private Random random=new Random();
	
	public void produce() throws InterruptedException {
		
		while(true) {
			
			queue.put(random.nextInt(10));
			
		}
		
	}
	
	public void consume() throws InterruptedException {
		
		Thread.sleep(1000);
		while(true) {
			if(random.nextInt(10)==0) {
				int value=queue.take();
				System.out.println("Taken value is : "+value+"  Queue size : "+queue.size());
			}
		}
		
	}

}
